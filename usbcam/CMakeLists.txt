# Set standards
cmake_minimum_required(VERSION 3.13)
project(usbcam C CXX)
set(CMAKE_CXX_STANDARD 17)

# /////////////////////////////////////////////////////////////////////////////
# ////////////////////////////// PROJECT FILES ////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

file(GLOB_RECURSE MY_SOURCES src/*)

# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////// DEPENDENCIES ////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

find_package(Python COMPONENTS Interpreter Development)

set(WIN_LIBS runtimeobject.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib 
advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib)

add_subdirectory(lib/pybind11)

# /////////////////////////////////////////////////////////////////////////////
# ///////////////////////////////// INCLUDES //////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

include_directories(
    "include"
    lib
    ${PYTHON_INCLUDE_DIRS}
    lib/pybind11/include
)

# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////////// BUILD ///////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

set(LIBRARY_OUTPUT_PATH bin/${CMAKE_BUILD_TYPE})
add_library(${PROJECT_NAME}-cpp ${MY_SOURCES})

pybind11_add_module(${PROJECT_NAME} ${MY_SOURCES})

# /////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////// LINKER ///////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

target_link_libraries(
    ${PROJECT_NAME}-cpp
    ${PYTHON_LIBRARIES}
)

if (WIN32)
set(PYBIND11_CPP_STANDARD /std:c++17)
target_link_libraries(
    ${PROJECT_NAME}-cpp
    ${WIN_LIBS}
)
target_link_libraries(
    ${PROJECT_NAME}
    PRIVATE
    ${WIN_LIBS}
)
endif()

# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////////// TESTS ///////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

set(EXECUTABLE_OUTPUT_PATH bin/${CMAKE_BUILD_TYPE})
file(GLOB_RECURSE MY_TESTS test/*)
add_executable(${PROJECT_NAME}-cpp-tests ${MY_TESTS})
target_link_libraries(
    ${PROJECT_NAME}-cpp-tests
    ${PROJECT_NAME}-cpp
)
